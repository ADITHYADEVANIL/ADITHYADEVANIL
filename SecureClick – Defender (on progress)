import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix

def train_spam_classifier():
    # Load the preprocessed dataset with features (X) and labels (y)
    # X: Features for each content (emails, URLs, text messages)
    # y: Labels indicating whether the content is spam/phishing/smishing (1) or legitimate (0)
    data = pd.read_csv('spam_phishing_smishing_dataset.csv')
    X = data['content'].values
    y = data['label'].values

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Feature extraction - You can use CountVectorizer or other techniques
    vectorizer = CountVectorizer()
    X_train_vectorized = vectorizer.fit_transform(X_train)
    X_test_vectorized = vectorizer.transform(X_test)

    # Train the Naive Bayes classifier
    classifier = MultinomialNB()
    classifier.fit(X_train_vectorized, y_train)

    # Make predictions on the test set
    y_pred = classifier.predict(X_test_vectorized)

    # Evaluate the model
    accuracy = accuracy_score(y_test, y_pred)
    confusion_mat = confusion_matrix(y_test, y_pred)
    print(f"Accuracy: {accuracy}")
    print("Confusion Matrix:")
    print(confusion_mat)

    # Save the trained model for real-time analysis
    with open('spam_classifier_model.pkl', 'wb') as f:
        pickle.dump(classifier, f)
    with open('spam_vectorizer.pkl', 'wb') as f:
        pickle.dump(vectorizer, f)

if __name__ == "__main__":
    train_spam_classifier()
